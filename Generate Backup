DECLARE @name VARCHAR(50) -- database name  
DECLARE @path VARCHAR(256) -- path for backup files  
DECLARE @fileName VARCHAR(256) -- filename for backup  
DECLARE @fileDate VARCHAR(20) -- used for file name
 
-- specify database backup directory
SET @path = 'C:\Backup\'  
 
-- specify filename format
SELECT @fileDate = CONVERT(VARCHAR(20),GETDATE(),112) 
 
DECLARE db_cursor CURSOR READ_ONLY FOR  
SELECT name 
FROM master.dbo.sysdatabases 
WHERE name NOT IN ('master','model','msdb','tempdb')  -- exclude these databases
 
OPEN db_cursor   
FETCH NEXT FROM db_cursor INTO @name   
 
WHILE @@FETCH_STATUS = 0   
BEGIN   
   SET @fileName = @path + @name + '_' + @fileDate + '.BAK'  
   BACKUP DATABASE @name TO DISK = @fileName  
 
   FETCH NEXT FROM db_cursor INTO @name   
END   

 
CLOSE db_cursor   
DEALLOCATE db_cursor




declare @tables as varchar(max)
declare @id int,
		@count int

set @tables = 'role, users'
set @id =1

--set @tables = (select Value from dbo.f_nSplit('countries', ',') as a)

--Tabla para guardar los nombres de las tablas que biene por parametro
create table [dbo].#tempTableParents(ID int identity(1,1), name varchar(200))

create table [dbo].#tempTableChildren(
	ID int identity(1,1), 
	foreign_key_name varchar(200),
	foreign_table varchar(200),
	foreign_column varchar(200),
	parent_table varchar(200),
	parent_column varchar(200),
	)

	insert into #tempTableParents(name)
		select * from dbo.f_nSplit(@tables, ',') as a

	select count(*) from #tempTableParents
	
	select @count = count(*) from #tempTableParents

	--while @id <= @count
	--begin
	--	select name from #tempTableParents
	--	select @id = @id + 1
	--end

	insert into #tempTableChildren
		select cast(f.name as varchar(255)) as foreign_key_name
		, cast(c.name as varchar(255)) as foreign_table
		, cast(fc.name as varchar(255)) as foreign_column
		, cast(p.name as varchar(255)) as parent_table
		, cast(rc.name as varchar(255)) as parent_column
		from  sysobjects f
		inner join sysobjects c on f.parent_obj = c.id
		inner join sysreferences r on f.id = r.constid
		inner join sysobjects p on r.rkeyid = p.id
		inner join syscolumns rc on r.rkeyid = rc.id and r.rkey1 = rc.colid
		inner join syscolumns fc on r.fkeyid = fc.id and r.fkey1 = fc.colid
		where f.type = 'F'
		and p.name in (select name from #tempTableParents)

		

	select * from #tempTableParents
	select * from #tempTableChildren

	drop table #tempTableParents
	drop table #tempTableChildren
 
 
 
-- Volcando estructura para procedimiento app-intranet.SP_GenerateBackupDB
DELIMITER //

CREATE procedure [dbo].[SP_GenerateBackupDB]
	--parametros
	@name as varchar(500)
	--@tables as varchar(max)
as
begin
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	--declare @name varchar(50)
	declare @path as varchar(256) --ruta para guardar el respaldo
	declare @fileName as varchar(256) --nombre del archivo de respaldo
	declare @fileDate as varchar(20) -- para el adjuntar al nombre del resplado
	--declare @tables as varchar(200)
	declare @id as int
	declare @count as int
	declare @SQL as varchar(max)

	--la ruta donde se guarda el .BAK
	set @path = 'C:\Respaldos\'
	--set @tables = (select Value from dbo.f_nSplit('users, roles', ',') as a)

	--Tabla para guardar los nombres de las tablas que biene por parametro
	--create table [dbo].#tempBackup(ID int identity(1,1), name varchar(200))
	--	insert into #tempBackup(name)
	--		select * from dbo.f_nSplit(@tables, ',') as a
	
	--select * from #tempBackup

	--format datetime 
	select @fileDate = REPLACE(REPLACE(REPLACE(CONVERT(VARCHAR(20),GETDATE(),120),'-','_'),' ','_'),':','')

	--create table [dbo].#tempBackup(ID int identity(1,1), name varchar(200))
	--	insert into #tempBackup(name)
	--		select TABLE_NAME from  Information_Schema.Tables
	--			where TABLE_CATALOG = @name 
	--			--and TABLE_NAME in('users')

	--	--DROP TABLE #tempBackup
	--	select * from #tempBackup where ID IN(2)
			
			select name from master.dbo.sysdatabases
				where name in(@name) 
			
			--set @SQL = '
			--	use master
			--	if NOT(DB_ID (N'''+@name+''') IS NULL) 
			--	begin
					
			--	end
			--'	
			--and table in('', '', )

		set @fileName = @path + @name + '_' + @fileDate + '.bak'

		backup database @name to disk = @fileName

		return 1;
	--end
end

//
DELIMITER ;

-- Volcando estructura para procedimiento app-intranet.SP_Restore
DELIMITER //

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[SP_Restore] 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    declare @database as varchar(100) = 'Intra_Posada_nom'
	declare @sSQL as nvarchar(max)
	declare @path as varchar(max)
	declare @filename as varchar(100)
	
	--begin try
	--set @path = (select (R.path ) from rutas R where r.company = 'fiesta')

	--Ubicaci√≥n del  archivo .BAK
	set @path = @path+'\' + 'Fiesta\' +@database+ '.bak'

	set @filename = @path--'C:\Respaldos\AGI\Intra_AGI_emp.bak'

	set @sSQL='
			IF DB_ID (N'''+@database+''') IS NULL begin
				CREATE DATABASE '+@Database+' COLLATE Modern_Spanish_CI_AS
			end
			'
			exec sp_executesql @sSQL
			set @sSQL='
			use master
			IF NOT(DB_ID (N'''+@Database+''') IS NULL) begin
				
				use '+@Database+'
				if not exists (SELECT * from Information_Schema.Tables)
				begin
					ALTER DATABASE '+@Database+' SET OFFLINE WITH ROLLBACK IMMEDIATE
					RESTORE DATABASE '+@Database+'
					FROM DISK = '''+@fileName+'''
					WITH REPLACE --, RECOVERY
					
				end 
			end			  
			'
	exec sp_executesql @sSQL
		--return 1
		--print 'Exito'
	--end try
	--begin catch
	--	return 0
	--	select ERROR_MESSAGE()
	--end catch

--RESTORE DATABASE @database
--FROM DISK = @filename

END
//
DELIMITER

